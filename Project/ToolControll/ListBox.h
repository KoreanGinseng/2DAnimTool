#pragma once
#include "Controll.h"
#include "Label.h"
#include "ScrollBar.h"

namespace ToolControll
{
	// ********************************************************************************
	/// <summary>
	/// リストボックスクラス
	/// </summary>
	// ********************************************************************************
	class CListBox : public CControll
	{
	private:
		LPLabel					m_pTemplate;			//!<追加するラベルのテンプレ
		CDynamicArray<LPLabel>	m_List;					//!<リスト
		LPScrollBar				m_pScrollBar;			//!<スクロールバー
		MofInt					m_Select;				//!<選択番号
		MofInt					m_PrevSelect;			//!<前フレームの選択番号
	public:
		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		CListBox(void);
		// ********************************************************************************
		/// <summary>
		/// デストラクタ
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		virtual ~CListBox(void);
		// ********************************************************************************
		/// <summary>
		/// リストボックスの生成
		/// </summary>
		/// <returns>リストボックスのポインタ</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		static std::shared_ptr<CListBox> CreateListBox(void);
		// ********************************************************************************
		/// <summary>
		/// 初期化
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Initialize(void);
		// ********************************************************************************
		/// <summary>
		/// 更新
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Update(void);
		// ********************************************************************************
		/// <summary>
		/// 描画
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		virtual void Render(void) override;
		// ********************************************************************************
		/// <summary>
		/// 解放
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Release(void);
		// ********************************************************************************
		/// <summary>
		/// テンプレラベルの取得
		/// </summary>
		/// <returns>ラベル</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		LPLabel GetTemplateLabel(void);
		// ********************************************************************************
		/// <summary>
		/// スクロールバーの取得
		/// </summary>
		/// <returns>スクロールバー</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		LPScrollBar GetScrollBar(void);
		// ********************************************************************************
		/// <summary>
		/// リストに追加
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Add(void);
		// ********************************************************************************
		/// <summary>
		/// リストに追加
		/// </summary>
		/// <param name="str">文字列</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Add(const CString& str);
		// ********************************************************************************
		/// <summary>
		/// リストの先頭に追加
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void AddFast(void);
		// ********************************************************************************
		/// <summary>
		/// リストの先頭に追加
		/// </summary>
		/// <param name="str">文字列</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void AddFast(const CString& str);
		// ********************************************************************************
		/// <summary>
		/// 指定番号に追加
		/// </summary>
		/// <param name="no">番号</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void AddNo(const MofU32& no);
		// ********************************************************************************
		/// <summary>
		/// 指定番号に追加
		/// </summary>
		/// <param name="str">文字列</param>
		/// <param name="no">番号</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void AddNo(const CString& str, const MofU32& no);
		// ********************************************************************************
		/// <summary>
		/// リストの最後尾に追加
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void AddLast(void);
		// ********************************************************************************
		/// <summary>
		/// リストの最後尾に追加
		/// </summary>
		/// <param name="str">文字列</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void AddLast(const CString& str);
		// ********************************************************************************
		/// <summary>
		/// リストの最後尾を削除
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Delete(void);
		// ********************************************************************************
		/// <summary>
		/// リストの先頭を削除
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void DeleteFast(void);
		// ********************************************************************************
		/// <summary>
		/// リストの指定番号を削除
		/// </summary>
		/// <param name="no">削除</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void DeleteNo(const MofU32& no);
		// ********************************************************************************
		/// <summary>
		/// リストの最後尾を削除
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void DeleteLast(void);
		// ********************************************************************************
		/// <summary>
		/// 入れ替え
		/// </summary>
		/// <param name="idx1">入れ替えるリスト番号１</param>
		/// <param name="idx2">入れ替えるリスト番号２</param>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void Swap(const MofU32& idx1, const MofU32& idx2);
		// ********************************************************************************
		/// <summary>
		/// 現在選択中の番号取得
		/// </summary>
		/// <returns>現在選択中の番号</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		MofInt  GetSelectNo(void) const;
		// ********************************************************************************
		/// <summary>
		/// 現在選択中の文字列取得
		/// </summary>
		/// <returns>文字列</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		CString GetText(void) const;
		// ********************************************************************************
		/// <summary>
		/// リストの指定番号の文字列取得
		/// </summary>
		/// <param name="no">指定番号</param>
		/// <returns>文字列</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		CString GetText(const MofInt& no) const;
		// ********************************************************************************
		/// <summary>
		/// リストの選択番号が変わったフラグ取得
		/// </summary>
		/// <returns>リストの選択番号が変わったフラグ</returns>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		MofBool IsChenged(void) const;
	};

	//置き換え
	typedef std::shared_ptr<CListBox> LPListBox;
}

