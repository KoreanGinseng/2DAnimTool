#pragma once
#include "Mof.h"
#include "Controll.h"
#include "Button.h"

namespace ToolControll
{
	// ********************************************************************************
	/// <summary>
	/// スクロールバークラス
	/// </summary>
	// ********************************************************************************
	class CScrollBar : public CControll
	{
	public:
		enum ScrlType {
			SCRLTYPE_VIRTICAL,				//!<縦方向
			SCRLTYPE_HORIZONTAL,			//!<横方向
		};
	private:
		LPButton		m_pBtnUp;			//!<上ボタン
		LPButton		m_pBtnScrl;			//!<スライドボタン
		LPButton		m_pBtnDown;			//!<下ボタン
		CRectangle		m_ScrlArea;			//!<スクロールするエリア
		CRectangle		m_ScrlBar;			//!<スクロールバーの矩形
		ScrlType		m_Type;				//!<スクロールタイプ
		MofInt			m_MaxSize;			//!<スクロールの最大値
		MofInt			m_ScrlWidth;		//!<スクロールバーの幅
		MofFloat		m_ScrlParPix;		//!<１ピクセルに動く量
		MofInt			m_Scroll;			//!<現在のスクロール値
		MofBool			m_bBarHold;			//!<スライドのホールドフラグ
	public:
		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <created>いのうえ,2020/02/24</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		CScrollBar(void);
		// ********************************************************************************
		/// <summary>
		/// デストラクタ
		/// </summary>
		/// <created>いのうえ,2020/02/24</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		virtual ~CScrollBar(void);
		// ********************************************************************************
		/// <summary>
		/// スクロールバーの生成
		/// </summary>
		/// <param name="info">生成情報</param>
		/// <returns>スクロールバーポインタ</returns>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		static std::shared_ptr<CScrollBar> CreateScrollBar(void);
		// ********************************************************************************
		/// <summary>
		/// 初期化
		/// </summary>
		/// <created>いのうえ,2020/02/24</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void Initialize(void);
		// ********************************************************************************
		/// <summary>
		/// 更新
		/// </summary>
		/// <created>いのうえ,2020/02/24</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void Update(void);
		// ********************************************************************************
		/// <summary>
		/// 描画
		/// </summary>
		/// <created>いのうえ,2020/02/24</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void Render(void);
		// ********************************************************************************
		/// <summary>
		/// 解放
		/// </summary>
		/// <created>いのうえ,2020/02/24</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void Release(void);
		// ********************************************************************************
		/// <summary>
		/// スクロール方向の設定
		/// </summary>
		/// <param name="t">スクロール方向</param>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void SetType(ScrlType t);
		// ********************************************************************************
		/// <summary>
		/// スクロールバーの幅の設定
		/// </summary>
		/// <param name="w">幅</param>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void SetWidth(const int& w);
		// ********************************************************************************
		/// <summary>
		/// スクロールするエリアの設定
		/// </summary>
		/// <param name="area">エリア矩形</param>
		/// <param name="maxSize">スクロール最大値</param>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		void SetScrlArea(const CRectangle& area, const int& maxSize);
		// ********************************************************************************
		/// <summary>
		/// スクロール最大値の変更
		/// </summary>
		/// <param name="maxSize">最大値</param>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void ChangeMaxSize(const int& maxSize);
		// ********************************************************************************
		/// <summary>
		/// スクロールエリアの取得
		/// </summary>
		/// <returns>スクロールエリア</returns>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		CRectangle GetScrlAreaRect(void) const;
		// ********************************************************************************
		/// <summary>
		/// スクロール値の取得
		/// </summary>
		/// <returns></returns>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		float GetScroll(void) const;
		// ********************************************************************************
		/// <summary>
		/// 上ボタンの取得
		/// </summary>
		/// <returns>上ボタン</returns>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		LPButton GetBtnUp(void);
		// ********************************************************************************
		/// <summary>
		/// スライドボタンの取得
		/// </summary>
		/// <returns>スライドボタン</returns>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		LPButton GetBtnScrl(void);
		// ********************************************************************************
		/// <summary>
		/// 下ボタンの取得
		/// </summary>
		/// <returns>下ボタン</returns>
		/// <created>いのうえ,2020/02/28</created>
		/// <changed>いのうえ,2020/02/28</changed>
		// ********************************************************************************
		LPButton GetBtnDown(void);
	private:
		// ********************************************************************************
		/// <summary>
		/// 各ボタンの生成
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void CreateButton(void);
		// ********************************************************************************
		/// <summary>
		/// バーのサイズの初期化
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void InitBarSize(void);
		// ********************************************************************************
		/// <summary>
		/// スライドボタンの位置の初期化
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void InitBarPos(void);
		// ********************************************************************************
		/// <summary>
		/// スライドボタンの長さ初期化
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void InitBarLength(void);
		// ********************************************************************************
		/// <summary>
		/// マウスでのスクロール処理
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void MoveMouse(void);
		// ********************************************************************************
		/// <summary>
		/// マウスホイールでのスクロール処理
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void MoveWheel(void);
		// ********************************************************************************
		/// <summary>
		/// 上下ボタンでのスクロール処理
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void MoveButton(void);
		// ********************************************************************************
		/// <summary>
		/// スクロール値の制御
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void CheckOverScroll(void);
		// ********************************************************************************
		/// <summary>
		/// 位置の再計算
		/// </summary>
		/// <created>いのうえ,2020/02/29</created>
		/// <changed>いのうえ,2020/02/29</changed>
		// ********************************************************************************
		void UpdateBarPos(void);
	};

	//置き換え
	typedef std::shared_ptr<CScrollBar> LPScrollBar;
}

